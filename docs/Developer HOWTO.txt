Developer HOWTO for Miradi Report XSLT work

BACKGROUND/GOALS

Miradi is a tool to help manage environmental biodiversity 
conservation projects around the world. It helps teams use 
the Open Standards process and use best practices. It is 
a desktop application written using Java and Swing. To learn 
more about Miradi, visit https://miradi.org

Until recently, the main way to produce reports from Miradi 
has been to use an internal reporting system that generates 
RTF output. This system is written in Java, and is hard to 
maintain, makes it hard to create reports, is not extensible 
by end-users, and requires a new release to change anything 
at all.

A couple releases ago, we added the ability for Miradi to 
output an entire project in an XML file, controlled by a 
schema (in Relax-NG-Compact ".rnc" form). Using this XML 
as the input, it is possible to create fancy XSL templates 
to produce almost any output imaginable. Two organizations 
that use Miradi have already started developing XSLT files 
for their own custom reports.

Our goal is to create additional sample XSL templates to 
show users what is possible with this new system. We also 
hope to replicate all the existing RTF report output formats 
using XSLT templates, so we can get rid of the RTF engine 
altogether.


XSLT SOFTWARE REQUIREMENTS

We are targeting the XSLT 2.0 standard, which means the 
Xalan tool will not work. Microsoft Word could be used, but 
we recommend using the Saxon command-line tools:

  http://saxon.sourceforge.net/
  http://www.saxonica.com/ 
  
You can use a browser to view the transformed data. However, 
there are various limitations:

1. You must insert a line like this before the first data line 
in the XML (before the <ConservationProject>):

<?xml-stylesheet type="text/xsl" href="1.xsl" media="screen" ?>

2. Firefox only supports XSLT 1.0 unless you use the Saxon add-on.
Other browsers probably also only support XSLT 1.0.

3. Chrome will not apply a local (file://) XSL file. You will need 
to copy the XML and XSL to a server and view it via http://
  

SAMPLES

The samples directory contains both a sample Miradi 3.3 
project in XML form (MarineExample-v1.xml) and several 
sample XSL files. There is also a copy of the RNC schema 
(Miradi-v1.rnc). 

Assuming you have saxon installed, you can produce HTML 
output by changing to the samples directory and running
this command (all on one line):

  java -jar <path-to-saxon-jar> 
      MarineExample-3.3.xml 
      1_Management-Plan-html_V2-1.xsl
  
**NOTE** Two of the sample XSLT files do not work:

"2_Five-year-WorkPlan-Html_V2-0.xsl" gives an error, 
which might be caused by using an MS-Word-specific 
feature.

"3_Ecosystem-Profile_V2-0.xsl" produces unformatted 
output. We have seen similar behavior when the XML 
namespace was wrong, or when we were running XSLT 2.0 
templates through a 1.0 XSL processor. So there is 
most likely some compatibility issue between this XSL 
file and saxon.


REQUESTED REPORTS

We would like to replicate the output of the built-in 
RTF reports, but using XSL to produce HTML output. The 
easiest way to see these reports is to run Miradi and 
open the Marine Example project that comes with it.

The Reports view lists a "Full Report" at the top, which 
is simply a way to run all the other listed reports at 
once. The Conceptual Model and Results Chains reports 
are highly graphical, so can be ignored for now.

The rest of the reports we would like to replicate in 
XSL:
- Target Viability
- Threat Ratings
- Action Plan
- Monitoring Plan
- Work Plan
- Progress Report

Most if not all of them follow the same pattern: First, 
there is a table with one row per item of that type. Then 
the details for each item are presented in a format that 
is typically one field per row.

Several of the "tables" are actually trees, with nested 
indentation.
 
Unfortunately, none of the sample XSL templates follow 
these patterns. They were developed to produce very 
specific custom output. However, we hope that the XSL 
code used will be helpful as a starting point for 
creating the simpler standard reports.
